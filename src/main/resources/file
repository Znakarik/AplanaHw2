Во время обучения программированию много времени уделяется написанию кода. Большинство начинающих разработчиков считают, что в этом и состоит их будущая деятельность. Отчасти это так, но в задачи программиста также входят поддержка и рефакторинг кода. Сегодня поговорим о рефакторинге.

Как устроен рефакторинг в Java - 1
Рефакторинг в курсе JavaRush
В курсе JavaRush тема рефакторинга затрагивается дважды:
Большая задача на уровне 5 квеста Multithreading;
Лекция о рефакторинге в Intellij IDEA на 9 уровне квеста Java Collections.
Благодаря большой задаче, есть возможность познакомиться с настоящим рефакторингом на практике, а лекция о рефакторинге в IDEA поможет разобраться с автоматическими средствами, которые невероятно облегчают жизнь.
Что такое рефакторинг?
Это изменение структуры кода без изменения его функционала. Например, есть метод, который сравнивает 2 числа и возвращает true, если первое больше, и false в обратном случае:

public boolean max(int a, int b) {
if(a > b) {
return true;
} else if(a == b) {
return false;
} else {
return false;
}
}

Получился очень громоздкий код. Даже новички редко пишут подобное, однако такой риск есть. Казалось бы, зачем тут блок if-else, если можно написать метод на 6 строк короче:

public boolean max(int a, int b) {
return a>b;
}

Теперь этот метод выглядит просто и элегантно, хотя выполняет то же действие, что и пример выше. Так и работает рефакторинг: меняет структуру кода, не затрагивая его суть. Существует множество методов и техник рефакторинга, которые рассмотрим подробнее.
Для чего нужен рефакторинг?
Существует несколько причин. Например, погоня за простотой и лаконичностью кода. Сторонники этой теории считают, что код должен быть максимально кратким, даже если для его понимания нужно несколько десятков строк комментарий. Другие разработчики уверены, что код должен подвергаться рефакторингу настолько, чтобы он был понятен с минимальным количеством комментариев.

Каждая команда выбирает свою позицию, но нужно помнить, что рефакторинг — это не сокращение.

Его главная цель — улучшить структуру кода.

В эту глобальную цель можно включить несколько задач:
Рефакторинг улучшает понимание кода, который написан другим разработчиком;
Помогает искать и устранять ошибки;
Позволяет повысить скорость разработки ПО;
В целом улучшает композицию программного обеспечения.
Если долгое время не проводить рефакторинг, могут возникнуть сложности в разработке вплоть до полной остановки работы.
